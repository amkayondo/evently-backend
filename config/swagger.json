{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Evently",
    "termsOfService": "",
    "contact": {
      "email": "evently@localhost:5000"
    },
    "license": {
      "name": "evently",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "evently-backend.herokuapp.com/",
  "basePath": "/",
  "tags": [
    {
      "name": "Events",
      "description": "Everything about your Events",
      "externalDocs": {
        "description": "Find out more"
      }
    },
    {
      "name": "users",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our app"
      }
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "api/events": {
      "post": {
        "tags": ["Events"],
        "summary": "create new event",
        "description": "",
        "operationId": "addEvent",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the organizer token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created profile object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "properties": {
                "event": {
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "How to train your dragon"
                    },
                    "description": {
                      "type": "string",
                      "example": "Ever wonder how?"
                    },
                    "body": {
                      "type": "string",
                      "example": "you have to believe"
                    },
                    "tagList": {
                      "type": "array",
                      "example": ["reactjs", "angularjs", "dragons"]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Evently_auth": ["write:Events", "read:Events"]
          }
        ]
      }
    },
    "api/events/": {
      "get": {
        "tags": ["Events"],
        "summary": "Get a list of organizer events",
        "description": "Returns a list of events",
        "operationId": "all organizer events",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/events/all": {
      "get": {
        "tags": ["Events"],
        "summary": "Get a list of all events",
        "description": "Returns a list of events",
        "operationId": "all all events",
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/events/{slug}": {
      "patch": {
        "tags": ["Events"],
        "summary": "Updates a Event in the store with form data",
        "description": "",
        "operationId": "updateEventWithForm",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created profile object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Eventstore_auth": ["write:Events", "read:Events"]
          }
        ]
      }
    },
    "api/users": {
      "post": {
        "tags": ["users"],
        "summary": "Create user",
        "description": "This can only be done by an Admin.",
        "operationId": "createUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully response",
            "schema": {
              "properties": {
                "user": {
                  "properties": {
                    "firstName": "techLead",
                    "lastName": "techLead",
                    "email": "joe01@gmail.com",
                    "password": "emabush2015",
                    "avatar": "dffdfsdf",
                    "deviceToken": "dkfkfkskdf",
                    "phoneNumber": "+250783636234",
                    "location": "Kigali"
                  }
                }
              }
            }
          }
        }
      }
    },
    "api/users/login": {
      "post": {
        "tags": ["users"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "login user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "api/users/login/google": {
      "get": {
        "tags": ["users"],
        "summary": "Logs user into the system via google",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "login user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          }
        }
      }
    },
    "api/users/login/facebook": {
      "get": {
        "tags": ["users"],
        "summary": "Logs user into the system via facebook",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "login user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },

    "api/users/send-email": {
      "post": {
        "tags": ["users"],
        "summary": "Send an email to a user",
        "description": "",
        "operationId": "check the user email address",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "login user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Send-email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User exists",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "User with that email does not exist"
          }
        }
      }
    },
    "api/users/reset-password": {
      "post": {
        "tags": ["users"],
        "summary": "Send an email to a user",
        "description": "",
        "operationId": "check the user email address",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "oldPassword": "OldPassword",
            "password": "password"
          }
        ],
        "responses": {
          "200": {
            "description": "User exists",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "User with that email does not exist"
          }
        }
      }
    },

    "api/users/verify": {
      "post": {
        "tags": ["users"],
        "summary": "Verify user's account",
        "description": "",
        "operationId": "verify user's account",
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "User exists",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "User with that email does not exist"
          }
        }
      }
    },
    "api/profile": {
      "post": {
        "tags": ["profile"],
        "summary": "create user's profile",
        "description": "",
        "operationId": "getUserByName",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created profile object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["profile"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "update profile",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created profile object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/profile/userId": {
      "get": {
        "tags": ["profile"],
        "summary": "get a given user profile",
        "description": "",
        "operationId": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Profile not found"
          }
        }
      }
    },
    "api/profile/me": {
      "get": {
        "tags": ["profile"],
        "summary": "get my profile",
        "description": "",
        "operationId": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "api/roles": {
      "post": {
        "tags": ["roles"],
        "summary": "create a role",
        "description": "",
        "operationId": "create a role",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created role object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "get": {
        "tags": ["roles"],
        "summary": "fetch all roles",
        "description": "",
        "operationId": "fetch all roles",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "300": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/roles/roleId": {
      "post": {
        "tags": ["roles"],
        "summary": "get one role",
        "description": "",
        "operationId": "get one role",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["roles"],
        "summary": "update a role",
        "description": "",
        "operationId": "update a role",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update role object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "300": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/ticket": {
      "post": {
        "tags": ["ticket"],
        "summary": "create a ticket",
        "description": "",
        "operationId": "create a ticket",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created ticket object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "get": {
        "tags": ["ticket"],
        "summary": "fetch all ticket",
        "description": "",
        "operationId": "fetch all ticket",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "300": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/ticket/ticketId": {
      "post": {
        "tags": ["ticket"],
        "summary": "get one ticket",
        "description": "",
        "operationId": "get one ticket",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created ticket object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid userId supplied"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      },
      "put": {
        "tags": ["ticket"],
        "summary": "update a ticket",
        "description": "",
        "operationId": "update a ticket",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "update ticket object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        ],
        "responses": {
          "300": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/ticket/category": {
      "post": {
        "tags": ["ticket category"],
        "summary": "create a ticket category",
        "description": "",
        "operationId": "create a ticket category",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created category object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "get": {
        "tags": ["ticket category"],
        "summary": "fetch all ticket category",
        "description": "",
        "operationId": "fetch all ticket category",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "300": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Item not found"
          }
        }
      }
    },
    "api/ticket/category/ticketId": {
      "get": {
        "tags": ["ticket category"],
        "summary": "get one ticket",
        "description": "",
        "operationId": "get one ticket",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Item not found"
          }
        }
      },
      "put": {
        "tags": ["ticket category"],
        "summary": "update a ticket category",
        "description": "",
        "operationId": "update a ticket category",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created category object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "300": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Eventstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://Eventstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:Events": "modify Events in your account",
        "read:Events": "read your Events"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "designation": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "Ticket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "price": {
          "type": "integer",
          "format": "int64"
        },
        "number": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "location": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Login": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Login"
      }
    },
    "Profile": {
      "type": "object",
      "properties": {
        "accountType": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "profilePhotos": {
          "type": "string"
        },
        "preferences": {
          "type": "string"
        },
        "social": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Profile"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Send-email": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "Event": {
      "type": "object",
      "required": ["name", "photoUrls"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "example": "Youssoupha in Kigali"
        },
        "description": {
          "type": "string",
          "example": "Bomaye Music"
        },
        "body": {
          "type": "string",
          "example": "bg body"
        },
        "tags": {
          "type": "array",
          "xml": {
            "name": "tag",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "location": {
          "type": "string",
          "example": "Kigali"
        },
        "startDate": {
          "type": "date",
          "example": "12-08-2020"
        }
      },
      "xml": {
        "name": "Event"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about evently",
    "url": "https://evently-backend.herokuapp.com/"
  }
}
